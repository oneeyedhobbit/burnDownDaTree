// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BDDT.BoardBuffer
{

using global::System;
using global::FlatBuffers;

public struct BoardChunk : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BoardChunk GetRootAsBoardChunk(ByteBuffer _bb) { return GetRootAsBoardChunk(_bb, new BoardChunk()); }
  public static BoardChunk GetRootAsBoardChunk(ByteBuffer _bb, BoardChunk obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BoardChunk __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public iVec2? Pos { get { int o = __p.__offset(4); return o != 0 ? (iVec2?)(new iVec2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Tile? Tiles(int j) { int o = __p.__offset(6); return o != 0 ? (Tile?)(new Tile()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TilesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartBoardChunk(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPos(FlatBufferBuilder builder, Offset<iVec2> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static void AddTiles(FlatBufferBuilder builder, VectorOffset tilesOffset) { builder.AddOffset(1, tilesOffset.Value, 0); }
  public static VectorOffset CreateTilesVector(FlatBufferBuilder builder, Offset<Tile>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BoardChunk> EndBoardChunk(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BoardChunk>(o);
  }
  public static void FinishBoardChunkBuffer(FlatBufferBuilder builder, Offset<BoardChunk> offset) { builder.Finish(offset.Value); }
};


}
